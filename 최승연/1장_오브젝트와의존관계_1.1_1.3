# 범위
1장 오브젝트와 의존관계
1.1 초난감DAO
1.2 DAO 분리
1.3 DAO의 확장

# WHY(목적을 찾는 질문)

사용자의 비즈니스 프로세스와 그에 따른 요구사항은 끊임없이 바뀌고 발전한다.
기술도 시간이 지남에 따라 바뀌고, 운영되는 환경도 변화한다.

따라서 개발자는 미래의 변화를 대비해야 한다. 

# WHAT(목적을 달성하기 위한 활용 도구)

미래를 어떻게 준비해야 하는가?
어떻게 바뀌더라도, 변화의 폭을 최소한으로 줄여두어야 한다. 

결론: 분리와 학장을 고려한 설계가 필요하다. 

# HOW (목적을 이루기 위해 어떻게 할 것인가)

## DAO의 분리

### 같은 클래스 내에서 메소드 분리
모든 변경과 발전은 한 번에 한 가지 관심사항에 집중해서 일어난다. 
관심이 같은 것끼리는 모으고, 관심이 다른 것은 따로 떨어져 있게 해야 한다. == 관심사 분리가 필요하다.

### 상속
아예 다른 관심사(기능)은 상속을 통해 서브클래스로 분리시키기
- 템플릿 메소드 패턴: 메소드를 필요에 맞게 구현해서, 사용하도록 하는 방법(스프링에서 자주 애용)
  - 변하지 않는 기능은 슈퍼 클래스에 만들어두고, 자주 변경되며 확장할 기능은 서브 클래스에 만듦
- 팩토리 메소드 패턴: 서브클래스(상속 구현체)에서 구체적인 오브젝트 생성 방법을 결정하게 하는 것

단점: 자바는 다중상속을 허용하지 않기 떄문에, 상속을 통한 분리는 다양한 목적으로 쓰이지 못한다. 

### 클래스 자체를 분리하기
관심사가 다른 기능은 서로 다른 클래스로 분리한다.


## DAO의 확장
### 인터페이스를 통한 확장
두 개의 분리된 클래스가 서로 긴밀하게 연결되어 있지 않도록, 중간에 추상적인 느슨한 연결고리를 만드는 것이다.
- 추상화: 어떤 것들의 공통적인 성격을 뽑아내어 이를 따로 분리해내는 작업(자바에서는 인터페이스가 이 역할을 한다)

장점
- 인터페이스를 통해 접근하기 떄문에, 실제 구현 클래스를 바꿔도 이걸 사용하는 쪽에서는 신경쓰지 않아도 된다.

#### 관계설정 책읨 분리
두 클래스 사이의 관계를 설정해주는 것 조차 관심사이다. 
따라서 인터페이스 구현체를 직접 선언하지 않고, 별도로 전달해줘야 완벽히 확장에 자유롭다고 할 수 있다.
- 가능한 이유: 객체지향의 다형성(코드에서는 특정 클래스를 전혀 알지 못하더라도 해당 클래스가 구현한 인터페이스를 사용했다면, 그 클래스의 오브젝틀르 인터페이스 타입으로 받아서 사용할 수 있다.)

어떤 구현체를 사용할 건지는 또 다른 클래스(<인터페이스를 사용하는 클래스>를 사용하는 클래스 == 클라이언트)로 넘기면 된다. 

# 기타(키워드)
- OCP
- 높은 응집도와 낮은 결합도
- 전략패턴
